<!DOCTYPE html>
<html lang="en">
<head>
  <!-- reset -->
  <link  href="styles/reset.css" rel="stylesheet">

  <meta charset="utf-8">
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

  <link rel="stylesheet" href="styles/styles.css">
  <link href='https://fonts.googleapis.com/css?family=Oxygen' rel='stylesheet' type='text/css'>
  <link rel="icon" href="./images/cl_icon.png"/>
  <title>CloudLogr</title>
</head>
<body>
  <div class="wrapper">
    <h1 class="center_text">CloudLogr</h1>
    <h2 class="center_text"><a class="a_link" href="/tank" "link to data view">Log Data</a></h2>
    <br>
    <p>This is a mock-up of a data-logging server.  The root idea is that a server could be configured to pull data (acting as a ModbusTCP client) from an endpoint device (a ModbusTCP server), store it in a cloud database, and users could have easy access to that data.</p>
    <br>
    <p>Functionality:  One notable feature on the following page is how the server polls for data.  Once the server starts polling, it will continue even if the browser is closed.  The polling is handled by a method on the 'schedule' model using setInterval.  Check the <a href="https://github.com/JasonHorine/cloudlogr" title="link to GitHub">schedule.js file to see that code.</a></p>
    <br>
    <p>To stop the polling process, an API route sets a flag in the database.  The polling process checks the database each time it wakes.  It either polls or calls clearInterval on itself accordingly.</p>
    <br>
    <p>There is one big problem in how this is coded.  The state machine of the polling using flags is a bit frail and not too hard to trip up.  I am still working to make it more robust.</p>
    <br>
    <p>eWON:  The data on the following page was originally retrieved from a test API provided by eWON.  When that test API expired, I added a method to generate simulated data within the server.</p>
  </div>
</body>
</html>


